{"version":3,"file":"amt.es.js","sources":["../src/global/type.js","../src/global/uuid.js","../src/date/dateFormatAny.js","../src/date/dateMethods.js","../src/string/warp.js","../src/index.js","../src/global/qs.js","../src/global/isIP.js","../src/optimize/throttle.js","../src/optimize/debounce.js","../src/array/remove_duplicate.js"],"sourcesContent":["let class2type = {};\nconst typeStr = 'Boolean Number String Function Array Date RegExp Object Error';\ntypeStr.split(' ').map(name => {\n  class2type['[object ' + name + ']'] = name.toLowerCase();\n});\n\n/**\n * @desc 确定JavaScript内置对象的类型，并返回小写形式的类型名称。\n * @param {Any} val 输入任意值\n * @return {String} 返回小写形式的类型名称 \n * 例如：type([]) ==> 'array'\n */\nconst type = val => {\n  return typeof val === 'object' || typeof val === 'function' ? class2type[toString.call(val)] || 'object' : typeof val;\n};\nconst $type = type;\n\n// 判断指定参数是否是一个空对象。\nconst isEmptyObject = obj => {\n  for (let name in obj) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * @desc 判断是否为空\n * @param {Any} val 输入任意值\n * @return {Boolean} 返回true/false, number类型的直接返回false\n */\nconst isNull = val => {\n  switch (type(val)) {\n  case 'string':\n    return !!(val === null || val === undefined || val === '');\n  case 'array':\n    return !!(val === null || val === undefined || val === [] || val.length === 0);\n  case 'number':\n    return false;\n  case 'object':\n    return isEmptyObject(val);\n  case 'boolean':\n    return val;\n  case 'function':\n    return val;\n  case 'date':\n    return isNaN(val.getTime());\n  default:\n    return !!(val === null || val === undefined);\n  }\n};\n\n/**\n * @desc 公共回调\n * @param {Object} fn 回调函数\n * @param {Any} data 回调数据\n * @return {Function} 返回fn(data)\n */\nlet callback = (fn, data) => {\n  if (fn && type(fn) == 'function' && fn(data)) {\n    return fn(data);\n  }\n};\nexport { type, $type, isNull, callback };","//自定义位数唯一标识符\nconst uuid = () => {\n  // 如果浏览器支持crypto\n  if (typeof crypto === 'object') {\n    // 使用crypto.randomUUID方法直接返回\n    if (typeof crypto.randomUUID === 'function') {\n      return crypto.randomUUID();\n    }\n    if (typeof crypto.getRandomValues === 'function' && typeof Uint8Array === 'function') {\n      const callback = (c) => {\n        const num = Number(c);\n        return (num ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (num / 4)))).toString(16);\n      };\n      return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, callback);\n    }\n  }\n  let timestamp = new Date().getTime();\n  let perforNow = typeof performance !== 'undefined' && performance.now && performance.now() * 1000 || 0;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    let random = Math.random() * 16;\n    if (timestamp > 0) {\n      random = (timestamp + random) % 16 | 0;\n      timestamp = Math.floor(timestamp / 16);\n    } else {\n      random = (perforNow + random) % 16 | 0;\n      perforNow = Math.floor(perforNow / 16);\n    }\n    return (c === 'x' ? random : random & 0x3 | 0x8).toString(16);\n  });\n};\nexport default uuid;","import { $type, isNull } from '../global/type';\n\n//字符串时间转成Date数据\nconst strToDate = dateObj => {\n  if ($type(dateObj) === 'string') {\n    dateObj = dateObj.replace(/T/g, ' ').replace(/\\.[\\d]{3}Z/, '').replace(/(-)/g, '/');\n    if (dateObj.indexOf('.') > 0) {\n      dateObj = dateObj.slice(0, dateObj.indexOf('.'));\n    }\n    return new Date(dateObj);\n  } else {\n    return dateObj;\n  }\n};\n\n/**\n * @desc 转化为任意格式的时间输出\n * @param {Any} date 时间\n * @param {String} fmt 格式化方式 全格式：yyyy-MM-dd hh:mm:ss:S qq WW+  默认：yyyy-MM-dd\n * @return {String} 返回:相应fmt格式\n */\nconst dateFormatAny = (date, fmt) => {\n  date = strToDate(date);\n  fmt = isNull(fmt) ? 'yyyy-MM-dd' : fmt;\n  if (!isNull(date)) {\n    date = new Date(date);\n    let o = {\n      //月份  \n      'M+': date.getMonth() + 1,\n      //日 \n      'd+': date.getDate(),\n      //小时   \n      'h+': date.getHours(),\n      //分   \n      'm+': date.getMinutes(),\n      //秒   \n      's+': date.getSeconds(),\n      //毫秒   \n      'S': date.getMilliseconds(),\n      //季度  \n      'q+': Math.floor((date.getMonth() + 3) / 3)\n    };\n    let week = {\n      0: '日',\n      1: '一',\n      2: '二',\n      3: '三',\n      4: '四',\n      5: '五',\n      6: '六'\n    };\n    if (/(y+)/.test(fmt)) {\n      fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substring(4 - RegExp.$1.length));\n    }\n    if (/(W+)/.test(fmt)) {\n      let zhou = '';\n      if (RegExp.$1.length > 1) {\n        if (RegExp.$1.length > 2) {\n          zhou = '星期';\n        } else {\n          zhou = '周';\n        }\n      } else {\n        zhou = '周';\n      }\n      fmt = fmt.replace(RegExp.$1, zhou + week[date.getDay().toString() + '']);\n    }\n    for (var k in o) if (new RegExp('(' + k + ')').test(fmt)) fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ('00' + o[k]).substring(('' + o[k]).length));\n    return fmt;\n  }\n  return isNull(date) ? false : date;\n};\n\nexport default dateFormatAny;","import dateFormatAny from './dateFormatAny';\nvar time = {\n  year: new Date().getFullYear(),\n  month: new Date().getMonth() + 1,\n  day: new Date().getDate()\n};\n\n/**\n * @desc 获取今日起始时间\n * @param {String} fmt 以什么格式输出：yyyy-MM-dd hh:mm:ss:S qq WW+  默认：yyyy-MM-dd\n * @return {Array} 返回:[start,end]\n */\nvar today = function today(fmt) {\n  fmt = fmt === undefined ? 'yyyy-MM-dd' : fmt;\n  var start = new Date().getTime(),\n    end = start;\n  return [dateFormatAny(start, fmt), dateFormatAny(end, fmt)];\n};\n\n/**\n * @desc 获取昨日起始时间\n * @param {String} fmt 以什么格式输出：yyyy-MM-dd hh:mm:ss:S qq WW+  默认：yyyy-MM-dd\n * @return {Array} 返回:[start,end]\n */\nvar yesterday = function yesterday(fmt) {\n  fmt = fmt === undefined ? 'yyyy-MM-dd' : fmt;\n  var start = new Date().getTime() - 3600 * 24 * 1000,\n    end = start;\n  return [dateFormatAny(start, fmt), dateFormatAny(end, fmt)];\n};\n\n/**\n * @desc 获取上月起始时间\n * @param {String} fmt 以什么格式输出：yyyy-MM-dd hh:mm:ss:S qq WW+  默认：yyyy-MM-dd\n * @return {Array} 返回:[start,end]\n */\nvar prevMonth = function prevMonth(fmt) {\n  fmt = fmt === undefined ? 'yyyy-MM-dd' : fmt;\n  var temp = {};\n  // 如果是一月份\n  if (time.month === 1) {\n    // 年份减一\n    temp.year = time.year - 1;\n    temp.month = 12;\n  } else {\n    temp.year = time.year;\n    temp.month = time.month - 1;\n  }\n  temp.day = time.day;\n\n  // 获取当月有多少天\n  var days = new Date(temp.year, temp.month, 0).getDate(),\n    start = new Date(''.concat(temp.year, '-').concat(temp.month, '-1')).getTime(),\n    end = new Date(''.concat(temp.year, '-').concat(temp.month, '-').concat(days)).getTime();\n  return [dateFormatAny(start, fmt), dateFormatAny(end, fmt)];\n};\n\n/**\n * @desc 获取本月起始时间\n * @param {Boolean} isSofar 结束时间是否截止到今天 默认false\n * @param {String} fmt 以什么格式输出：yyyy-MM-dd hh:mm:ss:S qq WW+  默认：yyyy-MM-dd\n * @return {Array} 返回:[start,end]\n */\nvar thisMonth = function thisMonth(isSofar, fmt) {\n  fmt = fmt === undefined ? 'yyyy-MM-dd' : fmt;\n  isSofar = !!isSofar;\n  var days = new Date(time.year, time.month, 0).getDate(),\n    start = new Date(''.concat(time.year, '-').concat(time.month, '-1')).getTime(),\n    end = new Date(''.concat(time.year, '-').concat(time.month, '-').concat(isSofar ? time.day : days)).getTime();\n  return [dateFormatAny(start, fmt), dateFormatAny(end, fmt)];\n};\n\n/**\n * @desc 获取近多少天的起始时间\n * @param {Number} days 天数\n * @param {String} fmt 以什么格式输出：yyyy-MM-dd hh:mm:ss:S qq WW+  默认：yyyy-MM-dd\n * @return {Array} 返回:[start,end]\n */\nvar pastDays = function pastDays(days, fmt) {\n  fmt = fmt === undefined ? 'yyyy-MM-dd' : fmt;\n  days = days === undefined ? 30 : days;\n  var start = new Date().getTime() - 3600 * 1000 * 24 * days,\n    end = new Date().getTime() - 3600 * 1000 * 24 * 1;\n  return [dateFormatAny(start, fmt), dateFormatAny(end, fmt)];\n};\n\nexport { today, yesterday, prevMonth, thisMonth, pastDays };","import { $type } from '../global/type';\n\n/**\n * @desc 换行 str以float分割并以tag来换行\n * @param {String} str 要换行的字符串\n * @param {String} float 以float字符分割 默认','\n * @param {String} tag 以tag来换行 默认'br换行标签'\n * @return {String} 返回整理后带换行tag的字符串\n * 例如：type([]) ==> 'array'\n */\nlet warp = (str, float, tag) => {\n  if (!str) {\n    return;\n  }\n  if ($type(str) !== 'string') {\n    return;\n  }\n  float = float === undefined ? ',' : float;\n  tag = tag === undefined ? '<br />' : tag;\n  let temp = str.split(float).reduce((prev, item, index, arr) => {\n    if (arr.length - 1 === index) {\n      prev += item;\n    } else {\n      prev += `${item}${tag}`;\n    }\n    return prev;\n  }, '');\n  return temp;\n};\n(function () {\n  // 添加到String原型链上\n  String.prototype.warp = function (float, tag) {\n    return warp(this, float, tag);\n  };\n})();\n\nexport default warp;","// 基础类\nconst version = '1.1.1'\nimport { type, isNull, callback } from './global/type'\nimport uuid from './global/uuid'\nimport isIP from './global/isIP'\nimport qs from './global/qs'\n\n// 时间类\nimport dateFormatAny from './date/dateFormatAny'\nimport { today, yesterday, prevMonth, thisMonth, pastDays } from './date/dateMethods'\n\n// 优化类\nimport throttle from './optimize/throttle'\nimport debounce from './optimize/debounce'\n\n// 数组类\nimport rda from './array/remove_duplicate'\n\n// 字符串类\nimport warp from './string/warp'\n\n\n// 集中在一个对象中,方便直接导出\nconst jbc = {\n  // 全局参数\n  version,\n  // 公共类\n  callback, type, isNull, qs, isIP,\n  // 优化类\n  throttle, debounce,\n  // 数组类\n  rda,\n  // 字符串类\n  uuid, warp,\n  // 时间类\n  dateFormatAny, today, yesterday, prevMonth, thisMonth, pastDays\n}\n\nexport default jbc\n","/**\n * @desc 对象转qs请求字符串\n * @param {Object} obj 对象\n * @return {String} 返回:请求参数拼接字符串 {id:123,name:'xiaoming'} => id=123&name=xiaoming\n */\nconst qs = obj => {\n  let str = '';\n  Object.keys(obj).map((name, index) => {\n    let value = obj[name];\n    if (value === '?' || value === '&') {\n      value = encodeURIComponent(obj[name])\n    }\n    str += index === 0 ? `${name}=${value}` : `&${name}=${value}`;\n  });\n  return str;\n};\n\nexport default qs;","/**\n * @desc 判断是否为IP地址\n * @param {String} url 输入地址\n * @return {Boolean} 返回:true||false\n */\nconst isIP = (url) => {\n  var str = url.match(/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)/g);\n  if (str == null || str == '') {\n    return false;\n  } else if (RegExp.$1 > 255 || RegExp.$2 > 255 || RegExp.$3 > 255 || RegExp.$4 > 255) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nexport default isIP;","/**\n * @desc 节流\n * @param {Function} callback 回调函数\n * @param {Number} delay 间隔时间 默认：300\n * @param {Boolean} immediate 是否立即执行 默认:true\n * @return 没有返回值\n */\nconst throttle = (callback, delay, immediate) => {\n  delay = delay == null ? 300 : delay;\n  immediate = immediate == null ? true : immediate;\n  var timer,\n    context,\n    iNow,\n    firstTime = +new Date(),\n    args = [];\n  return function () {\n    clearTimeout(timer);\n    context = this;\n    iNow = +new Date();\n    args = Array.prototype.slice.call(arguments);\n    // 判断是否是第一次执行\n    if (immediate) {\n      immediate = false;\n      callback.apply(context, args);\n    } else {\n      // 第二次执行的时候判断时间差\n      if (iNow - firstTime > delay) {\n        firstTime = iNow;\n        callback.apply(context, args);\n      } else {\n        // 判断是否是最后一次执行\n        timer = setTimeout(function () {\n          callback.apply(context, args);\n        }, delay);\n      }\n    }\n  }\n}\n\nexport default throttle ","/**\n* @desc 防抖\n* @param {Function} callback 回调函数\n* @param {Number} delay 间隔时间 默认：16.6\n* @param {Boolean} immediate 是否立即执行 默认:true\n* @return 没有返回值\n*/\nconst debounce = (callback, delay, immediate) => {\n  delay = delay == null ? 16.6 : delay;\n  immediate = immediate == null ? true : immediate;\n  var timeout;\n  return function () {\n    var context = this;\n    var args = arguments;\n\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n    if (immediate) {\n      // 判断是否执行过\n      var flag = !timeout;\n      timeout = setTimeout(function () {\n        callback.apply(context, args);\n      }, delay);\n      if (flag) {\n        callback.apply(context, args);\n      }\n    } else {\n      timeout = setTimeout(function () {\n        callback.apply(context, args);\n      }, delay);\n    }\n  }\n}\n\nexport default debounce","// import type from '../global/type';\n/**\n *\n * @desc 对象数组去重\n * @param {Array} arr 要去重的数组\n * @param {Boolean} isObject 用于提升去重效率，可选，默认true,  object类型数据采用了针对性的去重方法，不需要可以禁用\n * @param {String} key 根据对象的具体属性进行去重，可选，默认空\n * @return {Array} 返回\n */\nfunction rda(arr, isObject, key) {\n  console.log(new Date().getTime(), '开始', arr);\n  isObject = isObject === undefined ? true : isObject;\n  if (arr && arr.length > 0) {\n    let set = new Set(arr);\n    arr = Array.from(set);\n    // 需要把对象也去重\n    if (isObject) {\n      // 以某一个key值来判断是否重复\n      if (key) {\n        let obj = {}\n        arr = arr.reduce((prev, cur) => {\n          if (cur && typeof cur === 'object' && Object.hasOwn(cur, key)) {\n            if (obj[cur[key]] === undefined) {\n              // 不区属性分类型去重\n              obj[cur[key]] = true && prev.push(cur);\n            }\n          } else {\n            prev.push(cur);\n          }\n          return prev;\n        }, []);\n        console.log(new Date().getTime(), '根据key去重');\n        return Array.from(arr);\n      }\n      // 直接转成string对比\n      else {\n        let result = [...new Set(arr.map(JSON.stringify))].map(item => {\n          return item ? JSON.parse(item) : item;\n        });\n        console.log(new Date().getTime(), '转化为string对比');\n        return result;\n      }\n    }\n    // 不包含对象的话直接返回就行了\n    else {\n      console.log(new Date().getTime(), '非objert类型直接ES6去重');\n      return arr;\n    }\n  }\n  // 数组为空直接返回\n  else {\n    console.log(new Date().getTime(), '空数据直接返回');\n    return arr;\n  }\n}\nexport default rda;"],"names":["class2type","split","map","name","toLowerCase","type","val","toString","call","$type","isNull","length","obj","isEmptyObject","isNaN","getTime","dateFormatAny","date","fmt","dateObj","replace","indexOf","slice","Date","o","getMonth","getDate","getHours","getMinutes","getSeconds","S","getMilliseconds","Math","floor","week","test","RegExp","$1","getFullYear","substring","zhou","getDay","k","time","year","month","day","warp","str","float","tag","undefined","reduce","prev","item","index","arr","String","prototype","this","jbc","version","callback","fn","data","qs","Object","keys","value","encodeURIComponent","isIP","url","match","$2","$3","$4","throttle","delay","immediate","timer","context","iNow","firstTime","args","clearTimeout","Array","arguments","apply","setTimeout","debounce","timeout","flag","rda","isObject","key","set","Set","from","cur","hasOwn","push","JSON","stringify","parse","uuid","crypto","randomUUID","getRandomValues","Uint8Array","c","num","Number","timestamp","perforNow","performance","now","random","today","start","end","yesterday","prevMonth","temp","days","concat","thisMonth","isSofar","pastDays"],"mappings":"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"}