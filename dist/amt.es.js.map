{"version":3,"file":"amt.es.js","sources":["../src/global/type.js","../src/global/uuid.js","../src/date/dateFormatAny.js","../src/date/dateMethods.js","../src/string/warp.js","../src/number/float_operation.js","../src/index.js","../src/global/qs.js","../src/global/isIP.js","../src/optimize/throttle.js","../src/optimize/debounce.js","../src/array/remove_duplicate.js","../src/number/splitNum.js"],"sourcesContent":["let class2type = {};\nconst typeStr = 'Boolean Number String Function Array Date RegExp Object Error';\ntypeStr.split(' ').map(name => {\n  class2type['[object ' + name + ']'] = name.toLowerCase();\n});\n\n/**\n * @desc 确定JavaScript内置对象的类型，并返回小写形式的类型名称。\n * @param {Any} val 输入任意值\n * @return {String} 返回小写形式的类型名称 \n * 例如：type([]) ==> 'array'\n */\nconst type = val => {\n  return typeof val === 'object' || typeof val === 'function' ? class2type[toString.call(val)] || 'object' : typeof val;\n};\nconst $type = type;\n\n// 判断指定参数是否是一个空对象。\nconst isEmptyObject = obj => {\n  for (let name in obj) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * @desc 判断是否为空\n * @param {Any} val 输入任意值\n * @return {Boolean} 返回true/false, number类型的直接返回false\n */\nconst isNull = val => {\n  switch (type(val)) {\n  case 'string':\n    return !!(val === null || val === undefined || val === '');\n  case 'array':\n    return !!(val === null || val === undefined || val === [] || val.length === 0);\n  case 'number':\n    return false;\n  case 'object':\n    return isEmptyObject(val);\n  case 'boolean':\n    return val;\n  case 'function':\n    return val;\n  case 'date':\n    return isNaN(val.getTime());\n  default:\n    return !!(val === null || val === undefined);\n  }\n};\n\n/**\n * @desc 公共回调\n * @param {Object} fn 回调函数\n * @param {Any} data 回调数据\n * @return {Function} 返回fn(data)\n */\nlet callback = (fn, data) => {\n  if (fn && type(fn) == 'function' && fn(data)) {\n    return fn(data);\n  }\n};\nexport { type, $type, isNull, callback };","//自定义位数唯一标识符\nconst uuid = () => {\n  // 如果浏览器支持crypto\n  if (typeof crypto === 'object') {\n    // 使用crypto.randomUUID方法直接返回\n    if (typeof crypto.randomUUID === 'function') {\n      return crypto.randomUUID();\n    }\n    if (typeof crypto.getRandomValues === 'function' && typeof Uint8Array === 'function') {\n      const callback = (c) => {\n        const num = Number(c);\n        return (num ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (num / 4)))).toString(16);\n      };\n      return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, callback);\n    }\n  }\n  let timestamp = new Date().getTime();\n  let perforNow = typeof performance !== 'undefined' && performance.now && performance.now() * 1000 || 0;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    let random = Math.random() * 16;\n    if (timestamp > 0) {\n      random = (timestamp + random) % 16 | 0;\n      timestamp = Math.floor(timestamp / 16);\n    } else {\n      random = (perforNow + random) % 16 | 0;\n      perforNow = Math.floor(perforNow / 16);\n    }\n    return (c === 'x' ? random : random & 0x3 | 0x8).toString(16);\n  });\n};\nexport default uuid;","import { $type, isNull } from '../global/type';\n\n//字符串时间转成Date数据\nconst strToDate = dateObj => {\n  if ($type(dateObj) === 'string') {\n    dateObj = dateObj.replace(/T/g, ' ').replace(/\\.[\\d]{3}Z/, '').replace(/(-)/g, '/');\n    if (dateObj.indexOf('.') > 0) {\n      dateObj = dateObj.slice(0, dateObj.indexOf('.'));\n    }\n    return new Date(dateObj);\n  } else {\n    return dateObj;\n  }\n};\n\n/**\n * @desc 转化为任意格式的时间输出\n * @param {Any} date 时间\n * @param {String} fmt 格式化方式 全格式：yyyy-MM-dd hh:mm:ss:S qq WW+  默认：yyyy-MM-dd\n * @return {String} 返回:相应fmt格式\n */\nconst dateFormatAny = (date, fmt) => {\n  date = strToDate(date);\n  fmt = isNull(fmt) ? 'yyyy-MM-dd' : fmt;\n  if (!isNull(date)) {\n    date = new Date(date);\n    let o = {\n      //月份  \n      'M+': date.getMonth() + 1,\n      //日 \n      'd+': date.getDate(),\n      //小时   \n      'h+': date.getHours(),\n      //分   \n      'm+': date.getMinutes(),\n      //秒   \n      's+': date.getSeconds(),\n      //毫秒   \n      'S': date.getMilliseconds(),\n      //季度  \n      'q+': Math.floor((date.getMonth() + 3) / 3)\n    };\n    let week = {\n      0: '日',\n      1: '一',\n      2: '二',\n      3: '三',\n      4: '四',\n      5: '五',\n      6: '六'\n    };\n    if (/(y+)/.test(fmt)) {\n      fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substring(4 - RegExp.$1.length));\n    }\n    if (/(W+)/.test(fmt)) {\n      let zhou = '';\n      if (RegExp.$1.length > 1) {\n        if (RegExp.$1.length > 2) {\n          zhou = '星期';\n        } else {\n          zhou = '周';\n        }\n      } else {\n        zhou = '周';\n      }\n      fmt = fmt.replace(RegExp.$1, zhou + week[date.getDay().toString() + '']);\n    }\n    for (var k in o) if (new RegExp('(' + k + ')').test(fmt)) fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ('00' + o[k]).substring(('' + o[k]).length));\n    return fmt;\n  }\n  return isNull(date) ? false : date;\n};\n\nexport default dateFormatAny;","import dateFormatAny from './dateFormatAny';\nvar time = {\n  year: new Date().getFullYear(),\n  month: new Date().getMonth() + 1,\n  day: new Date().getDate()\n};\n\n/**\n * @desc 获取今日起始时间\n * @param {String} fmt 以什么格式输出：yyyy-MM-dd hh:mm:ss:S qq WW+  默认：yyyy-MM-dd\n * @return {Array} 返回:[start,end]\n */\nvar today = function today(fmt) {\n  fmt = fmt === undefined ? 'yyyy-MM-dd' : fmt;\n  var start = new Date().getTime(),\n    end = start;\n  return [dateFormatAny(start, fmt), dateFormatAny(end, fmt)];\n};\n\n/**\n * @desc 获取昨日起始时间\n * @param {String} fmt 以什么格式输出：yyyy-MM-dd hh:mm:ss:S qq WW+  默认：yyyy-MM-dd\n * @return {Array} 返回:[start,end]\n */\nvar yesterday = function yesterday(fmt) {\n  fmt = fmt === undefined ? 'yyyy-MM-dd' : fmt;\n  var start = new Date().getTime() - 3600 * 24 * 1000,\n    end = start;\n  return [dateFormatAny(start, fmt), dateFormatAny(end, fmt)];\n};\n\n/**\n * @desc 获取上月起始时间\n * @param {String} fmt 以什么格式输出：yyyy-MM-dd hh:mm:ss:S qq WW+  默认：yyyy-MM-dd\n * @return {Array} 返回:[start,end]\n */\nvar prevMonth = function prevMonth(fmt) {\n  fmt = fmt === undefined ? 'yyyy-MM-dd' : fmt;\n  var temp = {};\n  // 如果是一月份\n  if (time.month === 1) {\n    // 年份减一\n    temp.year = time.year - 1;\n    temp.month = 12;\n  } else {\n    temp.year = time.year;\n    temp.month = time.month - 1;\n  }\n  temp.day = time.day;\n\n  // 获取当月有多少天\n  var days = new Date(temp.year, temp.month, 0).getDate(),\n    start = new Date(''.concat(temp.year, '-').concat(temp.month, '-1')).getTime(),\n    end = new Date(''.concat(temp.year, '-').concat(temp.month, '-').concat(days)).getTime();\n  return [dateFormatAny(start, fmt), dateFormatAny(end, fmt)];\n};\n\n/**\n * @desc 获取本月起始时间\n * @param {Boolean} isSofar 结束时间是否截止到今天 默认false\n * @param {String} fmt 以什么格式输出：yyyy-MM-dd hh:mm:ss:S qq WW+  默认：yyyy-MM-dd\n * @return {Array} 返回:[start,end]\n */\nvar thisMonth = function thisMonth(isSofar, fmt) {\n  fmt = fmt === undefined ? 'yyyy-MM-dd' : fmt;\n  isSofar = !!isSofar;\n  var days = new Date(time.year, time.month, 0).getDate(),\n    start = new Date(''.concat(time.year, '-').concat(time.month, '-1')).getTime(),\n    end = new Date(''.concat(time.year, '-').concat(time.month, '-').concat(isSofar ? time.day : days)).getTime();\n  return [dateFormatAny(start, fmt), dateFormatAny(end, fmt)];\n};\n\n/**\n * @desc 获取近多少天的起始时间\n * @param {Number} days 天数\n * @param {String} fmt 以什么格式输出：yyyy-MM-dd hh:mm:ss:S qq WW+  默认：yyyy-MM-dd\n * @return {Array} 返回:[start,end]\n */\nvar pastDays = function pastDays(days, fmt) {\n  fmt = fmt === undefined ? 'yyyy-MM-dd' : fmt;\n  days = days === undefined ? 30 : days;\n  var start = new Date().getTime() - 3600 * 1000 * 24 * days,\n    end = new Date().getTime() - 3600 * 1000 * 24 * 1;\n  return [dateFormatAny(start, fmt), dateFormatAny(end, fmt)];\n};\n\nexport { today, yesterday, prevMonth, thisMonth, pastDays };","import { $type } from '../global/type';\n\n/**\n * @desc 换行 str以float分割并以tag来换行\n * @param {String} str 要换行的字符串\n * @param {String} float 以float字符分割 默认','\n * @param {String} tag 以tag来换行 默认'br换行标签'\n * @return {String} 返回整理后带换行tag的字符串\n * 例如：type([]) ==> 'array'\n */\nlet warp = (str, float, tag) => {\n  if (!str) {\n    return;\n  }\n  if ($type(str) !== 'string') {\n    return;\n  }\n  float = float === undefined ? ',' : float;\n  tag = tag === undefined ? '<br />' : tag;\n  let temp = str.split(float).reduce((prev, item, index, arr) => {\n    if (arr.length - 1 === index) {\n      prev += item;\n    } else {\n      prev += `${item}${tag}`;\n    }\n    return prev;\n  }, '');\n  return temp;\n};\n(function () {\n  // 添加到String原型链上\n  String.prototype.warp = function (float, tag) {\n    return warp(this, float, tag);\n  };\n})();\n\nexport default warp;","const reFloat = /[.]/;\n/**\n * @desc 对比传入的浮点类型数据，获取浮点类型小数点右侧最长长度\n * @param {Array} list 要对比的数组\n * @return {Number} 返回小数点右侧 最长长度\n * 例如：[0.1 , 0.22 , 0.333] ==> 3\n */\nconst getFloatRightLongest = function (list) {\n  if (!(list && list.length > 1)) {\n    return list;\n  }\n  let longer;\n  try {\n    let temp = Object.values(list).reduce((prev, item) => {\n      prev.push(reFloat.test(item) ? item.toString().split('.')[1].length : 0)\n      return prev;\n    }, []);\n    longer = Math.max(...temp);\n  } catch (e) {\n    longer = 0;\n  }\n  return longer;\n};\n\n/**\n * @desc 浮点类型 （加+）四则精度运算运算\n * @param {Number} num1 第一个数\n * @param {Number} num2 第一个数\n * @param {Number} numN 第N个数\n * @return {Number} 返回所有数相加结果\n * 例如：floatSum(0.1,0.2,0.3) ==> 0.6\n */\nconst floatSum = function (num1, num2) {\n  if (arguments.length < 2) {\n    return num1;\n  }\n  let max, list;\n  list = Object.values(arguments);\n  max = Math.pow(10, getFloatRightLongest(list));\n  if (arguments.length === 2) {\n    return Math.round(num1 * max + num2 * max) / max;\n  }\n  if (arguments.length > 2) {\n    let temp = list.reduce((prev, num) => {\n      prev += num * max;\n      return prev;\n    }, 0);\n    return Math.round(temp) / max;\n  }\n};\nconst floatJia = floatSum;\n\n/**\n * @desc 浮点类型 （减+）四则精度运算运算\n * @param {Number} num1 第一个数\n * @param {Number} num2 第一个数\n * @param {Number} numN 第N个数\n * @return {Number} 返回所有数相减结果\n * 例如：floatMin(0.8,0.3,0.4) ==> 0.1\n */\nconst floatMin = function (num1, num2) {\n  if (arguments.length < 2) {\n    return num1;\n  }\n  let max, list;\n  list = Object.values(arguments);\n  max = Math.pow(10, getFloatRightLongest(list));\n  if (arguments.length === 2) {\n    return Math.round(num1 * max - num2 * max) / max;\n  }\n  if (arguments.length > 2) {\n    let temp = list.reduce((prev, num, index) => {\n      if (index === 0) {\n        prev = num * max;\n      } else {\n        prev -= num * max;\n      }\n      return prev;\n    }, 0);\n    return Math.round(temp) / max;\n  }\n};\nconst floatJian = floatMin;\n\nexport { floatSum, floatMin, floatJia, floatJian, getFloatRightLongest };","// 基础类\nconst version = '1.0.7'\nimport { type, isNull, callback } from './global/type'\nimport uuid from './global/uuid'\nimport isIP from './global/isIP'\nimport qs from './global/qs'\n\n// 时间类\nimport dateFormatAny from './date/dateFormatAny'\nimport { today, yesterday, prevMonth, thisMonth, pastDays } from './date/dateMethods'\n\n// 优化类\nimport throttle from './optimize/throttle'\nimport debounce from './optimize/debounce'\n\n// 数组类\nimport rda from './array/remove_duplicate'\n\n// 字符串类\nimport warp from './string/warp'\n\n// 数字类\nimport {\n  floatSum, floatJia,\n  floatMin, floatJian,\n  getFloatRightLongest\n} from './number/float_operation'\nimport splitNum from './number/splitNum'\n\n\n// 集中在一个对象中,方便直接导出\nconst jbc = {\n  // 全局参数\n  version,\n  // 公共类\n  uuid, callback, type, isNull, qs, isIP,\n  // 优化类\n  throttle, debounce,\n  // 数组类\n  rda,\n  // 字符串类\n  warp,\n  // 时间类\n  dateFormatAny, today, yesterday, prevMonth, thisMonth, pastDays,\n  // 数字类\n  floatSum, floatMin, floatJia, floatJian, getFloatRightLongest, splitNum\n}\n\nexport default jbc\n","/**\n * @desc 对象转qs请求字符串\n * @param {Object} obj 对象\n * @return {String} 返回:请求参数拼接字符串 {id:123,name:'xiaoming'} => id=123&name=xiaoming\n */\nconst qs = obj => {\n  let str = '';\n  Object.keys(obj).map((name, index) => {\n    let value = obj[name];\n    if (value === '?' || value === '&') {\n      value = encodeURIComponent(obj[name])\n    }\n    str += index === 0 ? `${name}=${value}` : `&${name}=${value}`;\n  });\n  return str;\n};\n\nexport default qs;","/**\n * @desc 判断是否为IP地址\n * @param {String} url 输入地址\n * @return {Boolean} 返回:true||false\n */\nconst isIP = (url) => {\n  var str = url.match(/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)/g);\n  if (str == null || str == '') {\n    return false;\n  } else if (RegExp.$1 > 255 || RegExp.$2 > 255 || RegExp.$3 > 255 || RegExp.$4 > 255) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nexport default isIP;","/**\n * @desc 节流\n * @param {Function} callback 回调函数\n * @param {Number} delay 间隔时间 默认：300\n * @param {Boolean} immediate 是否立即执行 默认:true\n * @return 没有返回值\n */\nconst throttle = (callback, delay, immediate) => {\n  delay = delay == null ? 300 : delay;\n  immediate = immediate == null ? true : immediate;\n  var timer,\n    context,\n    iNow,\n    firstTime = +new Date(),\n    args = [];\n  return function () {\n    clearTimeout(timer);\n    context = this;\n    iNow = +new Date();\n    args = Array.prototype.slice.call(arguments);\n    // 判断是否是第一次执行\n    if (immediate) {\n      immediate = false;\n      callback.apply(context, args);\n    } else {\n      // 第二次执行的时候判断时间差\n      if (iNow - firstTime > delay) {\n        firstTime = iNow;\n        callback.apply(context, args);\n      } else {\n        // 判断是否是最后一次执行\n        timer = setTimeout(function () {\n          callback.apply(context, args);\n        }, delay);\n      }\n    }\n  }\n}\n\nexport default throttle ","/**\n* @desc 防抖\n* @param {Function} callback 回调函数\n* @param {Number} delay 间隔时间 默认：16.6\n* @param {Boolean} immediate 是否立即执行 默认:true\n* @return 没有返回值\n*/\nconst debounce = (callback, delay, immediate) => {\n  delay = delay == null ? 16.6 : delay;\n  immediate = immediate == null ? true : immediate;\n  var timeout;\n  return function () {\n    var context = this;\n    var args = arguments;\n\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n    if (immediate) {\n      // 判断是否执行过\n      var flag = !timeout;\n      timeout = setTimeout(function () {\n        callback.apply(context, args);\n      }, delay);\n      if (flag) {\n        callback.apply(context, args);\n      }\n    } else {\n      timeout = setTimeout(function () {\n        callback.apply(context, args);\n      }, delay);\n    }\n  }\n}\n\nexport default debounce","// import type from '../global/type';\n/**\n *\n * @desc 对象数组去重\n * @param {Array} arr 要去重的数组\n * @param {Boolean} isObject 用于提升去重效率，可选，默认true,  object类型数据采用了针对性的去重方法，不需要可以禁用\n * @param {String} key 根据对象的具体属性进行去重，可选，默认空\n * @return {Array} 返回\n */\nfunction rda(arr, isObject, key) {\n  console.log(new Date().getTime(), '开始', arr);\n  isObject = isObject === undefined ? true : isObject;\n  if (arr && arr.length > 0) {\n    let set = new Set(arr);\n    arr = Array.from(set);\n    // 需要把对象也去重\n    if (isObject) {\n      // 以某一个key值来判断是否重复\n      if (key) {\n        let obj = {}\n        arr = arr.reduce((prev, cur) => {\n          if (cur && typeof cur === 'object' && Object.hasOwn(cur, key)) {\n            if (obj[cur[key]] === undefined) {\n              // 不区属性分类型去重\n              obj[cur[key]] = true && prev.push(cur);\n            }\n          } else {\n            prev.push(cur);\n          }\n          return prev;\n        }, []);\n        console.log(new Date().getTime(), '根据key去重');\n        return Array.from(arr);\n      }\n      // 直接转成string对比\n      else {\n        let result = [...new Set(arr.map(JSON.stringify))].map(item => {\n          return item ? JSON.parse(item) : item;\n        });\n        console.log(new Date().getTime(), '转化为string对比');\n        return result;\n      }\n    }\n    // 不包含对象的话直接返回就行了\n    else {\n      console.log(new Date().getTime(), '非objert类型直接ES6去重');\n      return arr;\n    }\n  }\n  // 数组为空直接返回\n  else {\n    console.log(new Date().getTime(), '空数据直接返回');\n    return arr;\n  }\n}\nexport default rda;","/**\n * @desc 把数字以类似千分位形式隔开返回，也可以自定义每隔几位数隔开\n * @param {Number} num 要隔开的数 必填\n * @param {Number} count 每隔几个数 默认3\n * @param {String} num 用什么符号隔开 默认逗号,\n * @return {String} 返回类字符串\n * 例如：123456789 ==> 123,456,789\n */\nconst splitNum = (num, count, char) => {\n  count = count === undefined ? 3 : count;\n  char = char === undefined ? ',' : char;\n  let n = num;\n  let r = '';\n  let temp = '',\n    mod = 0,\n    mlen = ~~'1'.padEnd(count + 1, '0');\n  do {\n    // 求模的值， 用于获取高三位，这里可能有小数\n    mod = n % mlen;\n    // 值是不是大于1，是继续的条件\n    n = n / mlen;\n    // 高三位\n    temp = ~~mod;\n    // 1.填充: n > 1 循环未结束， 就要填充为比如 1 => 001\n    // 2.拼接“,”\n    r = (n >= 1 ? `${temp}`.padStart(count, '0') : temp) + (r ? `${char}${r}` : '');\n  } while (n >= 1);\n  const strNumber = `${num}`;\n  let index = strNumber.indexOf('.');\n  // 拼接小数部分\n  if (index >= 0) {\n    r += strNumber.substring(index);\n  }\n  return r;\n};\nexport default splitNum;"],"names":["class2type","split","map","name","toLowerCase","type","val","toString","call","$type","isNull","length","obj","isEmptyObject","isNaN","getTime","dateFormatAny","date","fmt","dateObj","replace","indexOf","slice","Date","o","getMonth","getDate","getHours","getMinutes","getSeconds","S","getMilliseconds","Math","floor","week","test","RegExp","$1","getFullYear","substring","zhou","getDay","k","time","year","month","day","warp","str","float","tag","undefined","reduce","prev","item","index","arr","String","prototype","this","reFloat","getFloatRightLongest","list","longer","temp","Object","values","push","max","e","floatSum","num1","num2","arguments","pow","round","num","floatMin","jbc","version","uuid","crypto","randomUUID","getRandomValues","Uint8Array","c","Number","timestamp","perforNow","performance","now","random","callback","fn","data","qs","keys","value","encodeURIComponent","isIP","url","match","$2","$3","$4","throttle","delay","immediate","timer","context","iNow","firstTime","args","clearTimeout","Array","apply","setTimeout","debounce","timeout","flag","rda","isObject","key","set","Set","from","cur","hasOwn","JSON","stringify","parse","today","start","end","yesterday","prevMonth","days","concat","thisMonth","isSofar","pastDays","floatJia","floatJian","splitNum","count","char","n","r","mod","mlen","padEnd","padStart","strNumber"],"mappings":"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"}